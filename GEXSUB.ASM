TITLE	GEXPRESS	Grocer Express

INIT	MACRO
	MOV	AX,@data	
	MOV	DS,AX
	MOV	ES,AX
	ENDM

CHAR	MACRO
	MOV	AH, 08H
	INT	21H
	ENDM
	

EXIT	MACRO
	MOV    AX,4C00H
	INT    21H
	ENDM
	
	.MODEL  SMALL,C
	.STACK	64
	.DATA
NUM_TBL	DW	24 DUP(0)
PRI_TBL	DW	24 DUP(0)

LEN	EQU	2
BIN	DW	0
FACT	DW	1
ASC	DB	'00'

INDEX	DB	?
CRLF	DB	0AH,0DH,'$'
CTR	DW	0
	
_A	EQU	[BP+4]
_B	EQU	[BP+6]
_C	EQU	[BP+8]
_D	EQU	[BP+10]

X_START	DW	?
X_END	DW	?
X_DIFF	DW	?
Y_START	DW	?
Y_END	DW	?
Y_DIFF	DW	?
COLS	DW	?
ROWS	DW	?
ERR_X	EQU	70
ERR_Y	EQU	80
ERR_B	EQU	90
RESULT	DW	0

ITEMS	DW	0
AMOUNT	DW	0

THOU	DW	1000
HUND	DW	100
TENS	DW	10
	.386
	.CODE
	PUBLIC	bounds
	PUBLIC	item
	PUBLIC	modulo
	PUBLIC	prices
	PUBLIC	set
	PUBLIC	select
	PUBLIC	string
	PUBLIC	total

TESTER	PROC	FAR
	INIT
	PUSH	BP
	MOV	BP, SP

	MOV	X_START, 95
	MOV	X_END, 545
	MOV	Y_START, 95
	MOV	Y_END, 395
	MOV	X_DIFF, 160
	MOV	Y_DIFF, 40
	MOV	COLS, 3
	MOV	ROWS, 8
	
	MOV	AX, 265
	MOV	BX, 265
	MOV	CX, 265
	PUSH	CX
	PUSH	BX
	PUSH	AX
	CALL	item

T90:	POP	BP
	EXIT
TESTER	ENDP

set	PROC	NEAR
	PUSH	BP
	MOV	BP, SP
	MOV	AX, _A
	MOV	X_START, AX
	MOV	AX, _B
	MOV	X_END, AX
	MOV	AX, _C
	MOV	Y_START, AX
	MOV	AX, _D
	MOV	Y_END, AX
	POP	BP
	RET
set	ENDP

bounds	PROC	NEAR
	PUSH	BP
	MOV	BP, SP
	MOV	X_DIFF, AX
	MOV	AX, _A
	MOV	Y_DIFF, AX
	MOV	AX, _B
	MOV	Y_DIFF, AX
	MOV	AX, _C
	MOV	COLS, AX
	MOV	AX, _D
	MOV	ROWS, AX
	POP	BP
	RET
bounds	ENDP

string	PROC	NEAR
	PUSH	BP
	MOV	BP, SP
	MOV	AX, _A
	OR	AL, 30H
	POP	BP
	RET
string	ENDP

item 	PROC	NEAR
	PUSH	BP
	MOV	BP, SP
	CALL	INSIDE
	CMP	AX, ERR_B
	JE	I90
	
	XOR	DX, DX
	MOV	AX, _A
	SUB	AX, X_START
	DIV	X_DIFF
	MOV	BX, AX
	MUL	X_DIFF
	ADD	AX, X_START
	ADD	AX, X_DIFF
	CMP	_A, AX
	JG	I70
	
	
	XOR	DX, DX
	MOV	AX, _B
	SUB	AX, Y_START
	DIV	Y_DIFF
	MOV	CX, AX
	MUL	Y_DIFF
	ADD	AX, Y_START
	ADD	AX, Y_DIFF
	CMP	_B, AX
	JG	I80
	
	MOV	AX, BX
	MUL	ROWS
	ADD	AX, CX
	JMP	I90
I70:	
	MOV	AX, ERR_X
	JMP	I90
I80:	
	MOV	AX, ERR_Y
I90:	
	POP	BP
	RET
item	ENDP


INSIDE	PROC	NEAR
	MOV	AX, _A
	CMP	AX, X_START
	JL	B80
	CMP	AX, X_END
	JG	B80

	MOV	AX, _B
	CMP	AX, Y_START
	JL	B80
	CMP	AX, Y_END
	JLE	B90
B80:
	MOV	AX, ERR_B
B90:	
	RET
INSIDE	ENDP


prices	PROC	NEAR
	PUSH	BP
	MOV	BP, SP

	MOV	BX, 0
	MOV	CX, 24	

p10:	
	MOV	AX, [BP+4]
	MOV	[PRI_TBL+BX], AX
	ADD	BP, 2
	INC	BX
	LOOP	P10
	
	MOV	AX, [PRI_TBL+_a]
	CALL	WRITEINT
	CALL	NEWLINE
	
	POP	BP
	RET
prices	ENDP


select	PROC	NEAR
	PUSH	BP
	MOV	BP, SP

	MOV	BX, _A
	MOV	CX, _B
	MOV	DX, _C
	MOV	[NUM_TBL+BX], CX
	MOV	[PRI_TBL+BX], DX
	INC	ITEMS

	;MOV	AX, [NUM_TBL+2]
	;CALL	WRITEINT
	;CALL	NEWLINE
	
	;MOV	AX, [PRI_TBL+2]
	;CALL	WRITEINT
	;CALL	NEWLINE

	MOV	CX, 4
	MOV	BX, 0

S10:	
	MOV	AX, [PRI_TBL+BX]
	CALL	WRITEINT
	CALL	NEWLINE
	INC	BX		; how much to add?	
	LOOP	S10

S90:	
	POP	BP
	RET
select	ENDP


total	PROC	NEAR
	PUSH	BP
	MOV	BP, SP

	MOV	AMOUNT, 0
	MOV	CX, 1		;change this later
	MOV	BX, 0
t10:	
	MOV	AX, word ptr [NUM_TBL+BX]
	MUL	word ptr [PRI_TBL+BX]
	ADD	AMOUNT, AX
	INC	BX
	LOOP	S10

	MOV	AX, AMOUNT
	;CALL	WRITEINT
	;CALL	NEWLINE
	
	POP	BP
	RET
total	ENDP

modulo	PROC	NEAR
	PUSH	BP
	MOV	BP, SP
	
	XOR	DX, DX
	MOV	AX, _A
m10:	
	CMP	AX, THOU
	JB	m20
	DIV	THOU
	OR	AL, 30H
	JMP	m90
m20:	
	CMP	AX, HUND
	JB	m30
	DIV	HUND
	OR	AL, 30H
	JMP	m90
m30:	
	DIV	TENS
	OR	AL, 30H
	JMP	m90

m90:	POP	BP
	RET
modulo	ENDP


WRITEINT	PROC	  NEAR
	PUSHA
	MOV	  CTR,0
	MOV	  CX,10			;Division factor
A20:
	CMP	  AX,CX			;Value < 10?
	JB	  A30			;  yes, exit
	XOR	  DX,DX			;Clear upper quotient
	DIV	  CX				;Divide by 10
	PUSH	  DX
	INC	  CTR
	JMP	  A20
A30:		
	PUSH	  AX
	INC	  CTR
	MOV	  CX,CTR
A40:
	POP	  DX
	OR	  DL,30H
	MOV	  AH,02
	INT	  21H
	LOOP	  A40		
	POPA
	RET
WRITEINT	ENDP

	
NEWLINE	PROC	  NEAR
	PUSHA
	MOV	  AH,09
	LEA	  DX,CRLF
	INT	  21H
	POPA
	RET
NEWLINE	ENDP
	END
